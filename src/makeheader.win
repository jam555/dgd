#
# This file is part of DGD, https://github.com/dworkin/dgd
# Copyright (C) 1993-2010 Dworkin B.V.
# Copyright (C) 2010-2012 DGD Authors (see the commit log for details)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Created by Jared Maddox on Jan 4, 2013.
# If you're having a bug while compiling DGD, it's likely my fault.
#

# This jumps through some hoops to figure out if we're on a Windows
# platform. Among other things, this is important because Windows is
# almost guaranteed to not have uname, or any of the other utility
# programs that this (and the various related) makefile needs.

# These two variables define make-function macros. They help to make the
# following tests much more compact, and to some extent more
# understandable.
  # When used in the call make-function, uses it's first argument as a
  # make-function, using each of the whitespace-separated values in it's
  # second argument individually as arguments to that "inner"
  # make-function. This allows a make-function that only accepts one
  # argument to be adapted to many. Found in the documentation for GNU
  # make.
MAP=$(foreach VAR,$(2),$(call $(1),$(VAR)))
STRIPING_FILTER=$(strip $(filter-out $(1), $(2)))
  # Filters the value "undefined" from it's input, and then strips out any
  # whitespace that isn't needed to retain the separation of individual
  # values. If all values are removed by the filter stage, then the result
  # will always evaluate as empty.
STRIP_NOTDEFED=$(call STRIPING_FILTER, undefined, $(1))
VAR_HAS_VAL=$(if $(call STRIP_NOTDEFED, $(flavor $(1))), $(call STRIPING_FILTER, $(2), $(1)))

  # If you want this makefile to support a particular build platform on
  # Windows, then you should place an informative variable name in the
  # WIN_SUBPLATFORMS variable. Note that these are inserted as their text
  # forms, instead of treated as variable references. We don't want these
  # to be expanded, since we're using the actual name to test for whether
  # that specific variable is defined or not.
WIN_PLATFORMS=Windows_NT
WIN_SUBPLATFORMS=MSYSTEM HOST_OVERRIDE

  # If OS is defined AND equals an entry in WIN_PLATFORMS, then run the
  # enclosed tests.
ifneq ($(call VAR_HAS_VAL, $(OS), $(WIN_PLATFORMS)),'')

    # Check each of the variables NAMED in WIN_SUBPLATFORMS for it's
    # flavor. If the flavor is 'undefined', then filter-out that flavor.
    # Finally, strip all whitespace to the bare minimium, and test the
    # result against an empty string. If there's nothing left in the
    # string (meaning that all of the flavors had been filtered out) then
    # print appropriate messages & error out.
  ifeq ($(call STRIP_NOTDEFED, $(call MAP,flavor,$(WIN_SUBPLATFORMS))),)

    $(warning DGD's makefile requires a nix-like environment.)
    $(warning On Windows, only MSys is currently recognized.)
    $(warning To force compilation, set HOST_OVERRIDE to your host environment.)
    $(warning WARNING! Forcing compilation may damage your computer!)
    $(error WARNING! Be very certain of the risks before forcing compilation!)
  endif
endif
